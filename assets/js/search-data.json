{
  
    
        "post0": {
            "title": "Numeric Data Types",
            "content": "Introduction to Python Programming . The fundamentals of a programming language includes its syntanctical and semantical understanding. Python is used as one of the major programming languages within Data Science and learning its basics is integral to be able to fully interpret the essence of analytics and machine learning. We will be covering the following topics in this notebook: . Data types Numbers | Strings | Booleans | Lists | Dictionaries | Tuples | Sets | . | . print(1234512345123451234512345+1) . 1234512345123451234512346 . print(0xFF) print(0b0110) print(0o010) . 255 6 8 . print(2.0) print(type(2.0)) print(1.2e300) print(type(1.2e300)) . 2.0 &lt;class &#39;float&#39;&gt; 1.2e+300 &lt;class &#39;float&#39;&gt; . 1e-325 . 0.0 . print(2+3j) print(type(2+3j)) . (2+3j) &lt;class &#39;complex&#39;&gt; . Strings . Python treats its strings as immutable (ie we cannot modify them). | Strings are delimited using single or double quotes. | In case you need to use a special character in the string we make use of escape characters or delimit with double quotes/single quotes. | We use a backslash character for stopping the special interpretation of Python characters. A backslash character in a string indicates that one or more characters that follow it should be treated specially. | Another beautiful way is to use triple quotes: Triple-quoted strings are delimited by matching groups of three single quotes or three double quotes. It also helps in multiline execution of strings. | . a = &quot;We are learning data science!&quot; print(a, type(a)) b = &#39;I am learning data science but in single quote&#39; print(b, type(b)) . We are learning data science! &lt;class &#39;str&#39;&gt; I am learning data science but in single quote &lt;class &#39;str&#39;&gt; . print(&#39;I will try to print a single quote (&#39;) character.&#39;) . File &#34;&lt;ipython-input-19-f91dcf75e9e8&gt;&#34;, line 1 print(&#39;I will try to print a single quote (&#39;) character.&#39;) ^ SyntaxError: invalid syntax . print(&#39;I am trying to print string (&quot;) in double quotes&#39;) . I am trying to print string (&#34;) in double quotes . print(&quot;I am trying to print string (&#39;) in single quote&quot;) . I am trying to print string (&#39;) in single quote . print(&quot;Hi! I am using backslash &quot;Hi &quot; there&quot;) . Hi! I am using backslash &#34;Hi&#34; there . print(&#39;&#39;&#39;This string has a single (&#39;) and a double (&quot;) quote.&#39;&#39;&#39;) . This string has a single (&#39;) and a double (&#34;) quote. . print(&quot;&quot;&quot;This is a string which goes across several lines&quot;&quot;&quot;) . This is a string which goes across several lines . Boolean Datatype in Python . Boolean datatype can take only two different types of values: True and False | Booleans are considered a numeric type in Python | &#39;is&#39; operator checks for object identity which means x is y evaluates to True only if x and y refer to the same object | &#39;in&#39; operators checks for membership | a and b point to the same interned object in memory, but when their values are outside the range of common integers (ranging from -5 to 256), they’re stored at separate memory addresses. | The == and != operators are used to compare object equality and they are being used to compare the value of two objects. The is and is not operators are used for comparing object identities which means here we are comparing whether the two variables are pointing to the same memory location or not. | . True == 1 . True . False == 0 . True . print(True or False) True+False . True . 1 . True and False . False . not(True) . False . 1 == 1.0 . True . bool(2) == bool(1) . True . 1 is 1.0 . False . x = [] y = [] x is y . False . x = 2 y = 2 x is y . True . a = 257 b = 257 a is b . False . a = -6 b = -6 a is b . False . a = 256 b = 256 a is b . True . a = [1,2,3] b = a print(id(a), id(b)) a is b . 139903864442304 139903864442304 . True . a = [1,2,3] b = a print(id(a), id(b)) b.append(1) print(a, b) print(id(a), id(b)) . 139903864430752 139903864430752 [1, 2, 3, 1] [1, 2, 3, 1] 139903864430752 139903864430752 . a = [1,2,4] b = [1,2,4] a is b . False . a = [1,2,3] b = a.copy() print(id(a), id(b)) a is b . 139903864898336 139903864470256 . False . a = 2 b = 2 print(a is b) print(a==b) . True True . a = 257 b = 257 print(a is b) print(a==b) . False True . Python Lists . Lists are collection of arbitrary objects . Python Lists are ordered | They contain arbitrary objects (ie they do not have a fixed datatype) | They are mutable | They are dynamic | The elements can be accessed by index | They can be nested in depth | . Therefore, we redefine lists as an ordered mutable collection of objects of different types that is accessible by indexing and has the ability to be nested in depth. . a = [1,2,3,4] b = [1,2,4,3] a is b . False . [1,2,3,4] == [1,2,3,4] . True . [4,3,2,1] == [1,2,3,4] . False . a = [1,&quot;India&quot;,&quot;USA&quot;,2] a . [1, &#39;India&#39;, &#39;USA&#39;, 2] . print(a[0]) print(a[1]) print(a[-1]) print(a[-2]) . 1 India 2 USA . A = [1,2,3,4] . A[0] = A[-4] . A[1] = A[-3] . A[2] = A[-2] . A[3] = A[-1] . a = [1,2,3,4] a[0]==a[-4] . True . a[0] is a[-4] . True . List Slicing . If A is a list, the expression A[m:n] returns the portion of a from index m to, but not including, index n . A = [1,2,3,4] A[1:3] . [2, 3] . Omitting the first index starts the slice at the beginning of the list, and omitting the second index extends the slice to the end of the list . A[:-1] . [1, 2, 3] . A[-1:] . [4] . A[1:-1] . [2, 3] . A[0:3:2] . [1, 3] . A[-3:-1] . [2, 3] . Important Note: [:] operator works for the list in a similar fashion it works for strings. However, there is a subtle difference between them. . A = [&quot;Naruto&quot;, &quot;Bleach&quot;, &quot;Haikyuu!&quot;, &quot;Jujustu Kaisen&quot;] B = &quot;Sasuke Uchiha&quot; print(A[:] is A) print(B[:] is B) . False True . If S is a string then S[:] returns a reference to the object S . If S is a list then A[:] returns a copy of that object . a = [1,2,3,4] print(1 in a) print(5 not in a) print(3 not in a) . True True False . a = [1,2,3,4] print(a*2) print(a+ [&quot;I am the concatenated one&quot;]) . [1, 2, 3, 4, 1, 2, 3, 4] [1, 2, 3, 4, &#39;I am the concatenated one&#39;] . a = [1,2,3] print(len(a)) print(&quot;The max: &quot;, max(a), &quot;The min: &quot;, min(a)) . 3 The max: 3 The min: 1 . a = [1,2,&quot;3&quot;] print(len(a)) . 3 . print(max(a), min(a)) . TypeError Traceback (most recent call last) &lt;ipython-input-92-35bf248ded4a&gt; in &lt;module&gt;() -&gt; 1 print(max(a), min(a)) TypeError: &#39;&gt;&#39; not supported between instances of &#39;str&#39; and &#39;int&#39; . A = [1,2,3,4] print(A[::-1]) s = &quot;ekataH ihsakaK droL&quot; s[::-1] . [4, 3, 2, 1] . &#39;Lord Kakashi Hatake&#39; . a = [1, [2,3], [[4,5], [2,3]], [1, [&quot;Narutooooo&quot;, [&quot;Sasukeeee&quot;, [&quot;Can you catch me?&quot;, &quot;Or Missed?&quot;]]]]] a . [1, [2, 3], [[4, 5], [2, 3]], [1, [&#39;Narutooooo&#39;, [&#39;Sasukeeee&#39;, [&#39;Can you catch me?&#39;, &#39;Or Missed?&#39;]]]]] . a[2][1] . [2, 3] . a[2][1][0] . 2 . a[3][1][1][0] . &#39;Sasukeeee&#39; . a = [1,&quot;Naruto&quot;,44] print(a) a[1] = &quot;Bye Naruto&quot; print(a) . [1, &#39;Naruto&#39;, 44] [1, &#39;Bye Naruto&#39;, 44] . a[1][0] = &quot;B&quot; print(a) . TypeError Traceback (most recent call last) &lt;ipython-input-115-12887200ee14&gt; in &lt;module&gt;() 1 # Let us try making Naruto to Boruto -&gt; 2 a[1][0] = &#34;B&#34; 3 print(a) TypeError: &#39;str&#39; object does not support item assignment . a+=[&quot;Sasuke&quot;] a . [1, &#39;Bye Naruto&#39;, 44, &#39;Sasuke&#39;] . Technically, we do not say list can be concatenated with new elements. A list must be concatenated with an object that is iterable. . a+=&quot;Sasuke&quot; a . [1, &#39;Bye Naruto&#39;, 44, &#39;Sasuke&#39;, &#39;S&#39;, &#39;a&#39;, &#39;s&#39;, &#39;u&#39;, &#39;k&#39;, &#39;e&#39;] . a.append(&quot;Sasuke&quot;) . a . [1, &#39;Bye Naruto&#39;, 44, &#39;Sasuke&#39;, &#39;S&#39;, &#39;a&#39;, &#39;s&#39;, &#39;u&#39;, &#39;k&#39;, &#39;e&#39;, &#39;Sasuke&#39;] . a.extend([1,2,3]) # behaves same as + operator a . [1, &#39;Bye Naruto&#39;, 44, &#39;Sasuke&#39;, &#39;S&#39;, &#39;a&#39;, &#39;s&#39;, &#39;u&#39;, &#39;k&#39;, &#39;e&#39;, &#39;Sasuke&#39;, 1, 2, 3] . a.insert(14, &quot;Hinata&quot;) a.insert(14, &quot;Hinata&quot;) a . [1, &#39;Bye Naruto&#39;, 44, &#39;Sasuke&#39;, &#39;S&#39;, &#39;a&#39;, &#39;s&#39;, &#39;u&#39;, &#39;k&#39;, &#39;e&#39;, &#39;Sasuke&#39;, 1, 2, 3, &#39;Hinata&#39;, &#39;Hinata&#39;] . a.remove(&quot;Hinata&quot;) a . [1, &#39;Bye Naruto&#39;, 44, &#39;Sasuke&#39;, &#39;S&#39;, &#39;a&#39;, &#39;s&#39;, &#39;u&#39;, &#39;k&#39;, &#39;e&#39;, &#39;Sasuke&#39;, 1, 2, 3, &#39;Hinata&#39;] . # It returns the value removed # It can remove a specific index a.pop(-1) a . [1, &#39;Bye Naruto&#39;, 44, &#39;Sasuke&#39;, &#39;S&#39;, &#39;a&#39;, &#39;s&#39;, &#39;u&#39;, &#39;k&#39;, &#39;e&#39;, &#39;Sasuke&#39;, 1, 2, 3] . a[2:2] = &quot;I got between the list!&quot; a . [1, &#39;Bye Naruto&#39;, &#39;I&#39;, &#39; &#39;, &#39;g&#39;, &#39;o&#39;, &#39;t&#39;, &#39; &#39;, &#39;b&#39;, &#39;e&#39;, &#39;t&#39;, &#39;w&#39;, &#39;e&#39;, &#39;e&#39;, &#39;n&#39;, &#39; &#39;, &#39;t&#39;, &#39;h&#39;, &#39;e&#39;, &#39; &#39;, &#39;l&#39;, &#39;i&#39;, &#39;s&#39;, &#39;t&#39;, &#39;!&#39;, 44, &#39;Sasuke&#39;, &#39;S&#39;, &#39;a&#39;, &#39;s&#39;, &#39;u&#39;, &#39;k&#39;, &#39;e&#39;, &#39;Sasuke&#39;, 1, 2, 3] . Tuples . Tuples are same as lists except for the following characteristics: . Tuples are immutable | They are defined using () and not [] | . c = (1,2,3) c[1] . 2 . c[1]=4 . TypeError Traceback (most recent call last) &lt;ipython-input-129-6cf5a07d14ca&gt; in &lt;module&gt;() -&gt; 1 c[1]=4 TypeError: &#39;tuple&#39; object does not support item assignment . c[::-1] . (3, 2, 1) . Why do we need Tuples? . Program execution is faster for large sized data storage | To guard sensitive data | . Dictionaries . The composite datatype made of up key-value pairs. Dictionaries and lists share the following characteristics: . Mutable | Dynamic(they can grow and shrink as needed) | Nesting (A list can contain another list. A dictionary can contain another dictionary. A dictionary can also contain a list, and vice versa) | . Dictionaries differ from lists in the way the elements can be accessed. . Dictionaries elements can be accessed using keys | Lists elements can be accessed using indices | . First_Way = {&quot;Sasuke&quot;:&quot;Naruto&quot;, &quot;Ichigo&quot;:&quot;Bleach&quot;, &quot;Sugawara&quot;:&quot;Haikyuu!&quot;} Second_Way = dict([(&quot;Sasuke&quot;, &quot;Naruto&quot;), (&quot;Ichigo&quot;,&quot;Bleach&quot;), (&quot;Sugawara&quot;, &quot;Haikyuu!&quot;)]) Third_Way = dict(Sasuke=&quot;Naruto&quot;, Ichigo=&quot;Bleach&quot;, Sugawara=&quot;Haikyuu!&quot;) print(First_Way, Second_Way, Third_Way) . {&#39;Sasuke&#39;: &#39;Naruto&#39;, &#39;Ichigo&#39;: &#39;Bleach&#39;, &#39;Sugawara&#39;: &#39;Haikyuu!&#39;} {&#39;Sasuke&#39;: &#39;Naruto&#39;, &#39;Ichigo&#39;: &#39;Bleach&#39;, &#39;Sugawara&#39;: &#39;Haikyuu!&#39;} {&#39;Sasuke&#39;: &#39;Naruto&#39;, &#39;Ichigo&#39;: &#39;Bleach&#39;, &#39;Sugawara&#39;: &#39;Haikyuu!&#39;} . First_Way[&quot;Sasuke&quot;] . &#39;Naruto&#39; . d = {(1,2,3):&quot;Amazon&quot;, (4,5,6):&quot;Flipkart&quot;} d . {(1, 2, 3): &#39;Amazon&#39;, (4, 5, 6): &#39;Flipkart&#39;} . e = {[1,2]:&quot;Cannot Happen&quot;} . TypeError Traceback (most recent call last) &lt;ipython-input-135-02b5a62b9f2c&gt; in &lt;module&gt;() -&gt; 1 e = {[1,2]:&#34;Cannot Happen&#34;} TypeError: unhashable type: &#39;list&#39; . A dictionary key should be unhashable by nature which means that it must be passed to a hash function. A hash function takes data of arbitrary size and maps it to a relatively simpler fixed-size value called a hash value (or simply hash), which is used for table lookup and comparison. . m = {1:2, 2:3} print(m) m.clear() print(m) . {1: 2, 2: 3} {} . m = {1:2, 3:4} m.get(1) . 2 . m.items() . dict_items([(1, 2), (3, 4)]) . print(m.keys()) print(m.values()) . dict_keys([1, 3]) dict_values([2, 4]) . # However, it raises an exception if the key is not found in the dictionary m.pop(1) . 2 . m.pop(1) . KeyError Traceback (most recent call last) &lt;ipython-input-144-9387c02f60e4&gt; in &lt;module&gt;() -&gt; 1 m.pop(1) KeyError: 1 . m.popitem() . (3, 4) . m.popitem() . KeyError Traceback (most recent call last) &lt;ipython-input-146-049c039a6be7&gt; in &lt;module&gt;() 1 # If dictionary is empty popitem() raises an exception -&gt; 2 m.popitem() KeyError: &#39;popitem(): dictionary is empty&#39; . d1 = {&quot;Naruto&quot;:&quot;Sasuke&quot;, &quot;Ichigo&quot;:&quot;Rukia&quot;} d2 = {&quot;Shoyo&quot;:&quot;Kageyama&quot;, &quot;Goju&quot;:&quot;Itadori&quot;} print(d1.update(d2)) print(d1) . None {&#39;Naruto&#39;: &#39;Sasuke&#39;, &#39;Ichigo&#39;: &#39;Rukia&#39;, &#39;Shoyo&#39;: &#39;Kageyama&#39;, &#39;Goju&#39;: &#39;Itadori&#39;} . Sets . Sets are unordered collection of objects in Python | They do not allow duplicate elements | A set is mutable, however the elements contained within it should be immutable | . a = set([1,2,3,4]) a . {1, 2, 3, 4} . b = set() print(type(b)) bool(b) . &lt;class &#39;set&#39;&gt; . False . len(a) . 4 . x1 = {&quot;Naruto&quot;, &quot;Ichigo&quot;, &quot;Sasuke&quot;} x2 = {&quot;Hinata&quot;, &quot;Orihime&quot;, &quot;Sakura&quot;} x1|x2 . {&#39;Hinata&#39;, &#39;Ichigo&#39;, &#39;Naruto&#39;, &#39;Orihime&#39;, &#39;Sakura&#39;, &#39;Sasuke&#39;} . x1.union(x2) . {&#39;Hinata&#39;, &#39;Ichigo&#39;, &#39;Naruto&#39;, &#39;Orihime&#39;, &#39;Sakura&#39;, &#39;Sasuke&#39;} . a = {1, 2, 3, 4} b = {2, 3, 4, 5} c = {1, 2, 4, 5} a.union(b,c) . {1, 2, 3, 4, 5} . a.intersection(b) . {2, 3, 4} . a.difference(b) . {1} . a.issubset(b) . False . a.update([&#39;corge&#39;, &#39;garply&#39;]) a . {1, 2, 3, 4, &#39;corge&#39;, &#39;garply&#39;} . a|={&quot;hey&quot;} a . {1, 2, 3, 4, &#39;corge&#39;, &#39;garply&#39;, &#39;hey&#39;} . Want more fun? Try the exercises and complete the assignment! .",
            "url": "https://vipulgaurav.github.io/notebooks/2021/05/07/Data-Types-in-Python.html",
            "relUrl": "/2021/05/07/Data-Types-in-Python.html",
            "date": " • May 7, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://vipulgaurav.github.io/notebooks/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://vipulgaurav.github.io/notebooks/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by Vipul Gaurav 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://vipulgaurav.github.io/notebooks/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://vipulgaurav.github.io/notebooks/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}